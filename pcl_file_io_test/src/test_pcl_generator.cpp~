#include <ros/ros.h>
#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl_ros/point_cloud.h>
#include <pcl_conversions/pcl_conversions.h>
#include <sensor_msgs/PointCloud2.h>

int main(int argc, char** argv)
{
  ros::init (argc, argv, "test_pcl_generator");
  ros::NodeHandle nh;

  /* message */
  ros::Publisher pcl_pub = nh.advertise<sensor_msgs::PointCloud2>("/test_cloud",1);
  sensor_msgs::PointCloud2 pcl_msg;

  /* cloud */
  pcl::PointCloud<pcl::PointXYZRGB> point_cloud;
  
  point_cloud.width = 307200;
  point_cloud.height = 1;
  point_cloud.points.resize(point_cloud.width * point_cloud.height);
  
  for(unsigned int i = 0; i < point_cloud.points.size(); i++) {
    point_cloud.points[i].x = 0.2 * (rand() / (RAND_MAX + 1.0f )) - 0.05;
    point_cloud.points[i].y = 0.2 * (rand() / (RAND_MAX + 1.0f )) - 0.05;
    point_cloud.points[i].z = 0.2 * (rand() / (RAND_MAX + 1.0f )) - 0.05;
    point_cloud.points[i].r = 255 * ((point_cloud.points[i].x + 0.05)/ 0.1);
    point_cloud.points[i].g = 255 * ((point_cloud.points[i].y + 0.05)/ 0.1);
    point_cloud.points[i].b = 255 * ((point_cloud.points[i].z + 0.05)/ 0.1);
  }
  
  /* conversion */
  pcl::toROSMsg(point_cloud,pcl_msg);
  pcl_msg.header.frame_id = "leap_work";
  
  /* publish */
  ros::Rate r(4);
  while (ros::ok())
  {
    pcl_pub.publish(pcl_msg);
    
    ros::spinOnce ();
    r.sleep ();
  }
  
  return 0;
}
